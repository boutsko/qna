
* change buttom, new_record? vs persisted?

Однако меняются свойства кнопки, когда это #new - кнопка 'Create
answer', а когда это #edit кнопка дожна стать 'Save'

Для любого объекта мы можем вызвать метод new_record?, который
вернет true, если объект не был сохранен в БД или его
противоположность - метод persisted?, который вернет true, если
объект уже был сохранен в базе. Используя эти методы, можно легко
определить, какое название должно быть у кнопки.

Кстати, говоря, рельсы внутри используют эти методы для того, чтобы
определить, отправлять запрос на create или на update.

* remotipart

Remotipart is a Ruby on Rails gem enabling AJAX file uploads with
jQuery in Rails 3 and Rails 4 remote forms. This gem augments the
native Rails jQuery remote form functionality enabling asynchronous
file uploads with little to no modification to your application.

* FactoryGirl
** наследование фабрик (вложенные фабрики)
** создание фабрики с полиморфными приложениями (attachments)

given(:question) { create(:question_with_attachment) }
given(:file) { question.attachments.first }

* Partials
** shared partials -- список приложенных файлов и к вопросам и ответам выводится через один partial
** в app/views/questions/show теперь вообще всего 4 строчки

* после обновление ответа обновляется только одна соотв. строка в списке ответов, а не перерисовывается весь список ответов

$('#answer_<%= @answer.id %>').replaceWith('<%= j render @answer %>')



* Short notation "get :best, on: :member"

[anatoly_cmdx]
anatoly_cmdxАнатолий
30 мар

Ну, вроде как "GET methods should NEVER change the resource"

Тогда уж правильнее будет использовать "get :best, on: :member", не?
Ответить в новой связанной теме
[vkurennov]
vkurennovVitaly Kurennov
30 мар

Само собой, там не get должен быть. Но я в ответе просто показал, как
сделать более компактную запись роутов на основе того примера, который
был. А ниже @dementiev_vm абсолютно врено написал, что там должен быть
post или patch


* quetions/_ansewers.html.slim

| Ответы
- @question.answers.where(best: false).each do |answer|
  p
    = answer.body
    p Файлы:
    ul
      - answer.attachments.each do |a|
        li= link_to a.file.identifier, a.file.url
    |  --
    = link_to "Редактировать", "", class: "edit-answer-link", data: { answer_id: answer.id } unless current_user.nil? or current_user.id != answer.user_id
    |  --
    = link_to "Удалить", question_answer_path(@question, answer), method: :delete, remote: true unless current_user.nil? or current_user.id != answer.user_id
    |  --
    = link_to "best", best_question_answer_path(@question, answer), remote: true unless current_user.nil? or current_user.id != @question.user_id
    p
      = nested_form_for [@question, answer], remote: true, html: {id: "edit-answer-#{answer.id}"} do |f|
        = f.label :body, 'Answer'
        = f.text_area :body
        p
          = f.fields_for :attachments do |a|
            - attachment = a.object
            - if attachment.new_record?
              = a.label :file
              = a.file_field :file
              = a.link_to_remove "Remove this file"
            - else
              p
                = attachment.file.file.filename
                = link_to "Del file", question_attachment_path(@question, attachment), method: :delete, remote: true
          p= f.link_to_add "Add file", :attachments
        = f.submit 'Save'

* rake db:drop && rake db:create && rake db:migrate && rake db:seed

*  railsguides woriking with javaScript in Rails :
http://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html


* $ is just a shortcut for jQuery.

The idea is that everything is done with the one global symbol (since the global namespaces is ridiculously crowded), jQuery, but you can use $ (because it's shorter) if you like:

// These are the same barring your using noConflict (more below)
var divs = $("div");       // Find all divs
var divs = jQuery("div");  // Also find all divs, because
console.log($ === jQuery); // "true"

If you don't want to use the alias, you don't have to. And if you want $ to not be an alias for jQuery, you can use noConflict and the library will restore $ to whatever it was before jQuery took it over. (Useful if you also use Prototype or MooTools.)


* js append

I would like to say: Hello world!!!

 .append( content [, content ] )Returns: jQuery

Description: Insert content, specified by the parameter, to the end of each element in the set of matched elements.

    version added: 1.0.append( content [, content ] )
        content
        Type: htmlString or Element or Array or jQuery
        DOM element, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.
        content
        Type: htmlString or Element or Array or jQuery
        One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.
    version added: 1.4.append( function )
        function
        Type: Function( Integer index, String html ) => htmlString or Element or jQuery
        A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.

The .append() method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the first child, use .prepend()).

The .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.

Consider the following HTML:

<h2>Greetings</h2>
<div class="container">
<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
</div>

You can create content and insert it into several elements at once:
1
	

$( ".inner" ).append( "<p>Test</p>" );

Each inner <div> element gets this new content:

<h2>Greetings</h2>
<div class="container">
<div class="inner">
Hello
<p>Test</p>
</div>
<div class="inner">
Goodbye
<p>Test</p>
</div>
</div>

You can also select an element on the page and insert it into another:

$( ".container" ).append( $( "h2" ) );

If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):

<div class="container">
<div class="inner">Hello</div>
<div class="inner">Goodbye</div>
<h2>Greetings</h2>
</div>

Important: If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.
Additional Arguments

Similar to other content-adding methods such as .prepend() and .before(), .append() also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.

For example, the following will insert two new <div>s and an existing <div> as the last three child nodes of the body:

var $newdiv1 = $( "<div id='object1'/>" ),
newdiv2 = document.createElement( "div" ),
existingdiv1 = document.getElementById( "foo" );
$( "body" ).append( $newdiv1, [ newdiv2, existingdiv1 ] );

Since .append() can accept any number of additional arguments, the same result can be achieved by passing in the three <div>s as three separate arguments, like so: $('body').append( $newdiv1, newdiv2, existingdiv1 ). The type and number of arguments will largely depend on how you collect the elements in your code.
Additional Notes:

    By design, any jQuery constructor or method that accepts an HTML string — jQuery(), .append(), .after(), etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <img onload="">). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. 

Examples:
Example: Appends some HTML to all paragraphs.

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>append demo</title>
<style>
p {
background: yellow;
}
</style>
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
</head>
<body>
<p>I would like to say: </p>
<script>
$( "p" ).append( "<strong>Hello</strong>" );
</script>
</body>
</html>

Demo:
Example: Appends an Element to all paragraphs.

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>append demo</title>
<style>
p {
background: yellow;
}
</style>
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
</head>
<body>
<p>I would like to say: </p>
<script>
$( "p" ).append( document.createTextNode( "Hello" ) );
</script>
</body>
</html>

Demo:
Example: Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.

<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>append demo</title>
<style>
p {
background: yellow;
}
</style>
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
</head>
<body>
<strong>Hello world!!!</strong>
<p>I would like to say: </p>
<script>
$( "p" ).append( $( "strong" ) );
</script>
</body>
</html>

Demo:
